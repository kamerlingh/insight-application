test_mse[i] <- train_test2(1000)
}
mean(test_mse)
?prcomp
library(iris)
library("iris")
load("iris")
getwd()
?library
load(iris)
load(mtcars)
load('mtcars')
summary(mtcars)
?iris
dimnames(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
medical.example <- data.frame(patient = 1:100, age=rnorm(100,mean=60,sd=12), treatment = gl(2,50,labels=c("treatment", "control")))
medical.example
gl(2,5,labels=c('a','c'))
gl(2,5)
player=sample(letters,25)
player
tapply(iris$Sepal.Width, iris$Species, max)
tapply(iris$Sepal.Length, iris$Species, max)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, sd)
data = as.data.frame(seq(as.Date("1990-01-01"), as.Date("2013-12-31"), by="day)"))
data = as.data.frame(seq(as.Date("1990-01-01"), as.Date("2013-12-31"), by="day"))
names(data)="date"
summary(data)
head(data)
data$month = substring(data$date, 6,7)
head(data)
data$year = substring(data$date,1,4)
data$snow_lying = round(rnorm(dim(data)[1], mean=0.5, sd=0.1))
head(data)
tapply(data$snow_lying,data$month,sum)
tapply(data$snow_lying,list(data$month,data$year),sum)
tapply(data$snow_lying,c(data$month,data$year),sum)
list(1,2)
c(1,2)
Orange
tapply(Orange$circumference,Orange$Tree,max)
tapply(Orange$circumference,Orange$Tree,max, simplify=TRUE)
tapply(Orange$circumference,Orange$Tree,max, simplify=FALSE)
?Orange
?datasets
library(help="datasets")
summary(LakeHuron)
head(LakeHuron)
names(LakeHuron)
dim(LakeHuron)
dim(Orange)
class(LakeHuron)
?ts
length(LakeHuron)
1972-1875
plot(LakeHuron)
for(x in 1:5){print(x)}
I=rep(0,100)
I
I[8]
source('~/.active-rstudio-document')
I
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(I)
source('~/.active-rstudio-document')
plot(I)
source('~/pset7problem3.R')
y <- 4
getwd()
ls()
SPE470 <- read.csv('SPE470')
SPE470 <- read.csv('SPE470.csv')
class(SPE470)
summary(SPE470)
head(SPE470)
plot(SPE470[,2], SPE470[,3])
SPE470 <- read.csv('SPE470.csv')
plot(SPE470[,2], SPE470[,3])
R1 <- tapply(SPE470[,2],SPE470[,1],mean)
R1
class(R1)
R1_test <- as.list(R1)
R1_test
squares <- list(1,2)
squares
R1
R1_test
R1_test <- as.vector(R1)
R1_test
squares <- c(1250, 500, 2475, 833.333, 2000,625, 487.5,4968.75)
R1sheet <- R1_test/squares
R1sheet
10000*32/160
R2 <- as.list(tapply(SPE470[,3],SPE470[,1],mean))
R2
R2sheet <- R2/squares
R2 <- as.vector(R2)
R2sheet <- R2/squares
R2
R2 <- tapply(SPE470[,3],SPE470[,1],mean)
R2
class(R2)
R2_test <- as.list(R2)
R2_test
R2_test <- as.vector(R2_test)
R2_test
dim(R2_test)
dim(R1_test)
R1_test
R1
R1_test2 <- as.vector(R1)
R1_test2
R2_test2 <- as.vector(R2)
R2_test2
R2sheet <- R2_test2/squares
R2sheet
R1sheet
difference <- (R2sheet-R1sheet)/R1sheet
difference
plot(c(50,50,50,39,397.5,594,640,500), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25))
plot(c(833.3,625,500, 487.5, 4968.75,2475,2000,1250), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25))
plot(c(833.3,625,500, 487.5, 4968.75,2475,2000,1250), c(1.1,1.12,1.66,0.77,1.87,1.24,2.27,1.25), xlab='squares',ylab='percent change')
library(swirl)
rm(list=ls())
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="IN"|country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran,size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?dplyr
?select
?arrange
iris2 <- select(iris, 1:4)
iris2
iris2 <- select(iris, Sepal.Length, Petal.Length)
head(iris2)
arrange(iris2, desc(Petal.Length))
iris3 <- arrange(iris2, desc(Petal.Length))
plot(iris3$Sepal.Length)
?mutate
iris4 <- mutate(iris3, Petal.Inches = Petal.Length*2.2)
head(iris4)
iris5 <- transmute(iris4, Petal.Inch <- Petal.Inches/(2.2*2.2))
head(iris5)
?summary
summary(iris5, mean(Petal.Inches))
summary(iris5)
summary(iris5, mean)
ls()
file.exists("iris5")
?dir.remove
?download.file
head(iris,10)
head(iris, nrows=10)
head(iris, nrow=10)
?head
head(iris, n=10L)
head(iris, n=10)
par(mfrow=c(1,1))
source('~/Insight/loading_sample_data.R')
setwd("~/Insight")
getwd()
source('~/Insight/loading_sample_data.R')
library(dplyr)
sample_data <- mutate(sample_data, Rs_inv = 1/Rs)
#sheet resistance versus deposition time
with(sample_data, plot(tdep, Rs_inv,
xlab="deposition time (seconds)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
))
with(sample_data, plot(thickness, Rs_inv,
xlab="thickness (nm)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
))
source('~/Insight/exploratory_plots.R')
source('~/.active-rstudio-document')
source('~/Insight/linear_regression.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
par(mfrow=c(1,1))
#sheet resistance versus deposition time
with(sample_data, plot(tdep, Rs_inv,
xlab="deposition time (seconds)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
))
par(mfrow=c(1,1))
#sheet resistance versus deposition time
with(sample_data, plot(tdep, Rs_inv,
xlab="deposition time (seconds)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
))
source('~/Insight/exploratory_plots.R')
source('~/Insight/linear_regression.R')
source('~/Insight/exploratory_plots.R')
setwd("~/")
ls
ls()
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group.by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
?select
submit()
submit()
submit()
submit()
submit()
submit()
par(mfrow=c(1,1))
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
)
with(sample_data[which(sample_data$substrate=="MgO"),], points(tdep, Rs_inv, col="black", pch=20))
par(mfrow=c(1,1), mar=c(4,4,2,2))
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
)
par(mfrow=c(1,1), mar=c(5,4,2,2))
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
)
par(mfrow=c(1,1), mar=c(5,4.2,2,2))
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
)
par(mfrow=c(1,1), mar=c(5.1,4.1,2.1,2.1))
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
)
with(sample_data[which(sample_data$substrate=="MgO"),], points(tdep, Rs_inv, col="black", pch=20))
with(sample_data[which(sample_data$substrate=="SiNx"),], points(tdep, Rs_inv, col="red"))
with(sample_data[which(sample_data$substrate=="SiNx"),], points(tdep, Rs_inv, col="red", pch=20))
with(sample_data[which(sample_data$substrate=="Glass"),], points(tdep, Rs_inv, col="green", pch=20))
with(sample_data[which(sample_data$substrate=="Al2O3"),], points(tdep, Rs_inv, col="blue"))
with(sample_data[which(sample_data$substrate=="Al2O3"),], points(tdep, Rs_inv, col="blue", pch=20))
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))
main=expression(R[S]^-1)
)
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1)),
main=expression(R[S]^-1)
)
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1)),
main="Inverse Sheet Resistance vs. Deposition Time"
)
with(sample_data[which(sample_data$substrate=="MgO"),], points(tdep, Rs_inv, col="black", pch=20))
with(sample_data[which(sample_data$substrate=="SiNx"),], points(tdep, Rs_inv, col="red", pch=20))
with(sample_data[which(sample_data$substrate=="Glass"),], points(tdep, Rs_inv, col="green", pch=20))
with(sample_data[which(sample_data$substrate=="MgO"),], points(tdep, Rs_inv, col="gray", pch=20))
with(sample_data[which(sample_data$substrate=="Al2O3"),], points(tdep, Rs_inv, col="blue", pch=20))
legend(225,0.0095,
c("MgO","SiNx", "Glass", "Sapphire"),
pch=c(20,20,20,20),
col=c("gray", "red", "green", "blue"))
plot(sample_data$thickness, sample_data$Rs_inv, type="n",
xlab="thickness (nm)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1)),
main="Inverse Sheet Resistance vs. Measured Thickness"
)
with(sample_data[which(sample_data$substrate=="MgO"),], points(thickness, Rs_inv, col="gray", pch=20))
with(sample_data[which(sample_data$substrate=="SiNx"),], points(thickness, Rs_inv, col="red", pch=20))
with(sample_data[which(sample_data$substrate=="Glass"),], points(thickness, Rs_inv, col="green", pch=20))
with(sample_data[which(sample_data$substrate=="Al2O3"),], points(thickness, Rs_inv, col="blue", pch=20))
legend(225,0.0095,
c("MgO","SiNx", "Glass", "Sapphire"),
pch=c(20,20,20,20),
col=c("gray", "red", "green", "blue"))
source('~/Insight/linear_regression.R')
dep_Al2O3.fit$resid
resid(dep_Al2O3.fit)
residuals(dep_Al2O3.fit)
sqrt(mean(residuals(dep_Al2O3.fit)^2))
sqrt(mean(residuals(thickness_Al2O3.fit)^2))
source('~/Insight/exploratory_plots.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
warnings()
source('~/Insight/linear_regression.R')
source('~/Insight/linear_regression.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sum(sample_data$Rs_inv - mean(sample_data$Rs_inv))
1 - sum(residuals(dep_Al2O3.fit)^2)/TSS
TSS <- sum(sample_data$Rs_inv - mean(sample_data$Rs_inv))
1 - sum(residuals(dep_Al2O3.fit)^2)/TSS
mean(sample_data$Rs_inv)
test_mean <- mean(sample_data$Rs_inv)
test_mean
sum((sample_data$Rs_inv - mean)^2)
sum((sample_data$Rs_inv - test_mean)^2)
TSS <- sum((sample_data$Rs_inv - mean(sample_data$Rs_inv))^2)
TSS
1 - sum(residuals(dep_Al2O3.fit)^2)/TSS
1 - sum(residuals(thickness_Al2O3.fit)^2)/TSS
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Insight/linear_regression.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
with(sample_data[which(sample_data$substrate=="Al2O3"),], plot(tdep, Rs_inv, col="blue", xlab="deposition time (s)", ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))))
legend(40,0.0040, bquote(R^2 == ~ .(dep_R2)))
abline(dep_Al2O3.fit, col="blue")
title(main="Inverse Sheet Resistance Vs. Deposition Time")
with(sample_data[which(sample_data$substrate=="Al2O3"),], plot(tdep, Rs_inv, col="blue", xlab="deposition time (s)", ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1))))
legend(40,0.0040, bquote(R^2 == ~ .(dep_R2)))
abline(dep_Al2O3.fit, col="blue")
?png
?legend
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getwd()
setwd("~/Insight")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
complete <- !(sample_data[,2]==0 | sample_data[,3]==0 | sample_data[,4]==0 | sample_data[,5]==0)
sum(complete)
length(sample_data[,2])
complete
source('~/Insight/loading_sample_data.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
complete
head(sample_data)
sample_data <- read.xlsx("sample_database.xlsx", sheetIndex=1, rowIndex=rowIndex, colIndex=colIndex)
head(sample_data)
class(sample_data)
class(sample_data[,3])
sample_data[,3] <- as.numeric(as.character(sample_data[,3]))
sample_data[,5] <- as.numeric(as.character(sample_data[,5]))
class(sample_data[,4])
class(sample_data[,2])
table(sample_data[,2])
test <- complete.cases(sample_data)
dim(test)
test
test2 <- sample_data[test,]
dim(test2)
dim(sample_data)
head(test2)
#Loading Sample Data
#load sample data from xlsx file
library(xlsx)
colIndex <- c(1,2,3,4,20)
rowIndex <- 3:1383
sample_data <- read.xlsx("sample_database.xlsx", sheetIndex=1, rowIndex=rowIndex, colIndex=colIndex)
#tidy data: rename columns, remove incomplete cases, use consistent names
names(sample_data) <- c('id', 'substrate', 'thickness', 'Rs', 'tdep')
#coerce thickness and tdep into numeric (from factor)
sample_data[,3] <- as.numeric(as.character(sample_data[,3]))
sample_data[,5] <- as.numeric(as.character(sample_data[,5]))
sample_data <- sample_data[complete.cases(sample_data),]
dim(sample_data)
sample_data[apply(sample_data[,-1], 1, function(x) !all(x==0)),]
test <- sample_data[apply(sample_data[,-1], 1, function(x) !all(x==0)),]
head(test)
complete <- !(sample_data[,2]==0 | sample_data[,3]==0 | sample_data[,4]==0 | sample_data[,5]==0)
sample_data <- sample_data[complete,]
dim(sample_data)
#Loading Sample Data
#load sample data from xlsx file
library(xlsx)
colIndex <- c(1,2,3,4,20)
rowIndex <- 3:1383
sample_data <- read.xlsx("sample_database.xlsx", sheetIndex=1, rowIndex=rowIndex, colIndex=colIndex)
#tidy data: rename columns, remove incomplete cases, use consistent names
names(sample_data) <- c('id', 'substrate', 'thickness', 'Rs', 'tdep')
#coerce thickness and tdep into numeric (from factor)
sample_data[,3] <- as.numeric(as.character(sample_data[,3]))
sample_data[,5] <- as.numeric(as.character(sample_data[,5]))
sample_data <- sample_data[complete.cases(sample_data),]
#incomplete cases have zero values in one or more columns
sample_data[apply(sample_data[,-1], 1, function(x) !any(x==0)),]
test <- sample_data[apply(sample_data[,-1], 1, function(x) !any(x==0)),]
test
test <- sample_data[apply(sample_data[c(2:5)], 1, function(x) any(x!=0)),]
dim(test)
test <- sample_data[apply(sample_data[c(2:5)], 1, function(x) !all(x==0)),]
dim(test)
head(test)
test <- sample_data[apply(sample_data[c(2:5)], 1, function(x) !all(x==0.00)),]
dim(test)
test <- sample_data[apply(sample_data[,c(2:5], 1, function(x) !all(x==0.00)),]
test <- sample_data[apply(sample_data[,c(2:5)], 1, function(x) !all(x==0.00)),]
dim(test)
test <- rbind(c(1,2,3), c(0,1,2), c(0,0,0), c(9,0,9))
test
test <- test[apply(test[,-1], 1, function(x) !all(x)),]
test <- test[apply(test[,-1], 1, function(x) !all(x==0)),]
test
test <- rbind(c(1,2,3), c(0,1,2), c(0,0,0), c(9,0,9))
test <- test[apply(test[,-1], 1, function(x) !all(x==0)),]
test
test <- test[apply(test[,-1], 1, function(x) !any(x==0)),]
test
source('~/.active-rstudio-document')
dim(sample_data)
source('~/Insight/exploratory_plots.R')
source('~/Insight/exploratory_plots.R')
source('~/Insight/exploratory_plots.R')
plot(sample_data$tdep, sample_data$Rs_inv, type="n",
xlab="deposition time (s)",
ylab=expression(paste("inverse sheet resistance ", (Omega/sq)^-1)),
main="Inverse Sheet Resistance vs. Deposition Time"
)
